import asyncio
from telegram import InputFile
from telegram.ext import CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from dateparser.search.search import DateSearchWithDetection
import re
import dateparser
import logging
from telegram import Update
import os
from glob import glob
from telegram.ext import (
    # Updater,
    MessageHandler,
    filters,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
)
from datetime import datetime, timedelta
from db import *
import sqlite3
import uuid

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("../db/mydatabase.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–µ–º chat_id
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        user_id INTEGER,
        chat_id INTEGER,
        arcan INTEGER DEFAULT NULL,
        referral_code TEXT
    )
"""
)

# cursor.execute("ALTER TABLE users ADD COLUMN already_have_all_files TEXT DEFAULT NULL")
# cursor.execute("ALTER TABLE users ADD COLUMN birth_date TEXT DEFAULT NULL")
# cursor.execute("ALTER TABLE users ADD COLUMN like TEXT DEFAULT NULL")
# cursor.execute("ALTER TABLE users ADD COLUMN first_name TEXT DEFAULT NULL")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS referrals (
        id INTEGER PRIMARY KEY,
        referrer_id INTEGER,
        referred_id INTEGER,
        FOREIGN KEY (referrer_id) REFERENCES users (id),
        FOREIGN KEY (referred_id) REFERENCES users (id)
    )
"""
)

conn.commit()


def generate_referral_code():
    return str(uuid.uuid4())


def add_user(username, chat_id, referral_code=None):
    cursor.execute(
        "INSERT INTO users (username, chat_id, referral_code) VALUES (?, ?, ?)",
        (username, chat_id, referral_code),
    )
    conn.commit()
    return cursor.lastrowid


def add_points(user_id, points):
    cursor.execute(
        "UPDATE users SET points = points + ? WHERE id = ?", (points, user_id)
    )
    conn.commit()


load_dotenv()

TOKEN = os.getenv("TOKEN")


def clean_filename(filename):
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    name, ext = os.path.splitext(filename)
    sphere = name[-1]
    if sphere == "0":
        sphere = "–û—Ç–Ω–æ—à–µ–Ω–∏—è"
    elif sphere == "1":
        sphere = "–§–∏–Ω–∞–Ω—Å—ã"
    elif sphere == "2":
        sphere = "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É —Ü–∏—Ñ—Ä (–Ω–æ–º–µ—Ä –∞—Ä–∫–∞–Ω–∞)
    arcan_number_match = re.search(r"\d+", name)
    if arcan_number_match:
        arcan_number = arcan_number_match.group()
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Ü–∏—Ñ—Ä
        clean_name = re.sub(r"(_+)", " ", name)
        clean_name = re.sub(r"\b\d+\b", "", clean_name)
        # clean_name = f"{arcan_number} –ê—Ä–∫–∞–Ω {clean_name}"
        clean_name = f"{arcan_number} –ê—Ä–∫–∞–Ω {sphere}"
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–∏—Ñ—Ä, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_name = re.sub(r"(_+)", " ", name)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    return clean_name.strip() + ext


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)


def parse_date(date_str):

    if parsed_date := dateparser.parse(date_str, languages=["ru"]):
        return parsed_date.date()
    else:
        return None


def generate_pdf_path(arcan, try_, type):
    pdf_directory = "../misk/"
    if type:
        if pdf_files := glob(os.path.join(pdf_directory, f"{arcan}_*{type}.pdf")):
            try:
                return pdf_files[try_]
            except:
                return None
        else:
            return None
    elif pdf_files := glob(os.path.join(pdf_directory, f"{arcan}_*.pdf")):
        return pdf_files
    else:
        return None


async def send_arcan(
    update: Update, context: ContextTypes.DEFAULT_TYPE, arcan, type, refer=None
):
    if not type:
        all_pdf = generate_pdf_path(arcan, 0, None)
        for pdf in all_pdf:
            with open(pdf, "rb") as pdf_file:
                new_filename = clean_filename(os.path.basename(pdf))
                await context.bot.send_document(
                    chat_id=refer,
                    document=InputFile(pdf_file, filename=new_filename),
                    caption="",
                )
        # await context.bot.send_message(
        #     chat_id=refer,
        #     text="–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ñ–µ—Ä—ã —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, —Ç–æ –ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @polinaataroo\nüíå",
        # )
    else:
        for i in range(3):
            if pdf_path := generate_pdf_path(arcan, i, type):
                with open(pdf_path, "rb") as pdf_file:
                    new_filename = clean_filename(os.path.basename(pdf_path))
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=InputFile(pdf_file, filename=new_filename),
                        caption="",
                    )


def calculate_arcan(date):
    # –†–∞—Å—á–µ—Ç –∞—Ä–∫–∞–Ω–∞
    while date > 22:
        date = date - 22
    return date


def extract_digit_substring(input_string):
    if matches := re.findall(r"\d+", input_string):
        start_index = input_string.index(matches[0])
        end_index = input_string.rindex(matches[-1]) + len(matches[-1])
        return input_string[start_index:end_index]
    else:
        return input_string


def first_try_pars(message):
    maybe_date = extract_digit_substring(message)
    res = parse_date(maybe_date)
    if res is None:
        res = parse_date(message)
    return res


def second_try_pars(message: str):
    _search_with_detection = DateSearchWithDetection()
    result = _search_with_detection.search_dates(message, languages=["ru"])
    result = result.get("Dates")
    if result == [] or result is None:
        return None
    birth_date = replace_shit_from_string(str(result[0][1]))
    print(f"BIRTH DATE ={birth_date}")
    return birth_date


def replace_shit_from_string(str: str):
    return (
        str.replace("-", "")
        .replace(" ", "")
        .replace(":", "")
        .replace("0", "")
        .replace(",", "")
    )


async def check_subscription(
    update: Update, context: ContextTypes.DEFAULT_TYPE, channel_id
):
    user_id = update.effective_user.id
    try:
        member = await context.bot.get_chat_member(channel_id, user_id)
        if member.status in ["member", "administrator", "creator"]:
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    return False


async def ask_to_invite_friend(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user
):
    user_id = update.effective_user.id
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–Ø —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ —Ç–µ–±–µ –ø—Ä–æ –æ–¥–Ω—É —Å—Ñ–µ—Ä—É.\n–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ -- –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n\n{referral_link} \n\n–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚ú®",
        # reply_markup=reply_markup,
    )


async def handle_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if context.user_data.get("was_met"):
        return
    message = update.message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ user_data
    context.user_data["temporary_birth_date"] = message
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ user_data
    context.user_data["temporary_update"] = update
    context.user_data["temporary_user"] = user  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ user_data
    # context.user_data["temporary_contex"] = update  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ user_data

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="confirm_date_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_date_no")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–¢–∞–∫ –∫–∞–∫ —É –≤–∞—Å –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –í—Å—ë –≤–µ—Ä–Ω–æ?\n–í–∞—à–∞ –¥–∞—Ç–∞: {message}",
        reply_markup=reply_markup,
    )


async def confirm_birthday_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data
    if query.data == "confirm_date_no":
        # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        await context.bot.delete_message(
            chat_id=query.message.chat_id, message_id=query.message.message_id
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–•–æ—Ä–æ—à–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—èüôèüèº",
        )
        user_data["awaiting_new_birth_date"] = True
    elif query.data == "confirm_date_yes":
        await context.bot.delete_message(
            chat_id=query.message.chat_id, message_id=query.message.message_id
        )
        context.user_data["was_met"] = True
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É
        message = user_data.get("temporary_birth_date")
        birth_date = first_try_pars(message)
        # user = update.message.from_user
        user_data = context.user_data
        await notify_new_user(user_data.get("temporary_update"), context, message)
        context.user_data["real_birth_date"] = message
        birth_date = first_try_pars(message)
        # context.user_data["user"] = user
        context.user_data["user"] = user_data.get("temporary_user")
        context.user_data["already_in"] = 1
        context.user_data["is_robot_sure"] = ""
        if birth_date is None:
            context.user_data[
                "is_robot_sure"
            ] = "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω –∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∞—é—Å—å, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–∫–∞–Ω, –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—å: "
            birth_date = second_try_pars(message)
        else:
            birth_date = replace_shit_from_string(str(birth_date))
            message = user_data["real_birth_date"]
            birth_date = first_try_pars(message)
        birth_date = (
            second_try_pars(message)
            if birth_date is None
            else replace_shit_from_string(str(birth_date))
        )
        user_data["birth_date"] = birth_date

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã
        keyboard = [
            [InlineKeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è‚ù§Ô∏è", callback_data="0")],
            [InlineKeyboardButton("–§–∏–Ω–∞–Ω—Å—ãüí∏", callback_data="1")],
            [InlineKeyboardButton("–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µüìö", callback_data="2")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=reply_markup,
        )


# https://t.me/polinabelyaewa
def increment_counter(
    update: Update, context: ContextTypes.DEFAULT_TYPE, counter_name: str
):
    chat_id = update.effective_chat.id
    context.bot_data.setdefault(counter_name, {}).setdefault(chat_id, 0)
    context.bot_data[counter_name][chat_id] += 1


def get_counter(update: Update, context: ContextTypes.DEFAULT_TYPE, counter_name):
    chat_id = update.effective_chat.id
    return context.bot_data.get(counter_name, {}).get(chat_id, 0)


def increment_arcana_counter(update: Update, context: ContextTypes.DEFAULT_TYPE, arcan):
    chat_id = update.effective_chat.id
    context.bot_data.setdefault("arcana_counter", {}).setdefault(
        chat_id, {}
    ).setdefault(arcan, 0)
    context.bot_data["arcana_counter"][chat_id][arcan] += 1


def get_arcana_stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    return context.bot_data.get("arcana_counter", {}).get(chat_id, {})


async def handle_get_stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    win = get_counter(update, context, "success_count")
    lose = get_counter(update, context, "failure_count")
    arcana_stat = get_arcana_stat(update, context)
    stat = "" if arcana_stat == {} else "–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä–∫–∞–Ω–∞–º:\n"
    text = f"""–Ø —É–∂–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∞—Ä–∫–∞–Ω–æ–≤: {win} \n–ù–æ –±—ã–ª–æ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–¥—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {lose} \n{stat}"""
    for arcan, count in arcana_stat.items():
        text += f"{arcan} –∞—Ä–∫–∞–Ω = {count}\n"
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
    )


NOTIFICATION_CHAT_ID = "-4099609712"


async def notify_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE, message):
    user = update.message.from_user
    cursor = conn.cursor()
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(id) FROM users")
    count = cursor.fetchone()[0]

    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "UPDATE users SET birth_date = ?, birth_date = ? WHERE chat_id = ?",
        (message, user.first_name, update.effective_chat.id),
    )
    conn.commit()

    notification_text = f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username} —Ä–æ–¥–∏–ª—Å—è: {message})\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {count}"
    # update.effective_chat.id

    await context.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=notification_text)


async def notify_referal_program(
    update: Update, context: ContextTypes.DEFAULT_TYPE, refer
):
    user = update.message.from_user
    notification_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} –ø—Ä–∏–≥–ª–∞—Å–∏–ª {refer})"
    await context.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=notification_text)


async def notify_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user = update.message.from_user
    notification_text = f"–ü–æ–ª–∏–Ω–∞ –º–æ–ª–æ–¥–µ—Ü!\n\n –≠—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {context.user_data['first_name']} (@{context.user_data['username']} —Ä–æ–¥–∏–ª—Å—è: {context.user_data['real_birth_date']})\n –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–Ω –≤—ã–±—Ä–∞–ª —Å—Ñ–µ—Ä—É: {context.user_data['choose']}. –¢–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—å–∫—É –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –∏ –Ω–∞–¥–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç—É —Å—Ñ–µ—Ä—É!!!"
    await context.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=notification_text)


async def notify_julik(context: ContextTypes.DEFAULT_TYPE):
    # user = update.message.from_user
    notification_text = f"–≠—Ç–æ—Ç –≥—Ä—è–∑–Ω—ã–π –∂—É–ª–∏–∫ —Ö–æ—Ç–µ–ª –Ω–∞—Å –Ω–∞–µ–±–∞—Ç—å –∏ –æ–±–Ω—É–ª–∏—Ç—å –±–æ—Ç–∞:\n\n {context.user_data['first_name']} (@{context.user_data['username']})\n"
    await context.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=notification_text)


async def notify_no(update: Update, context: ContextTypes.DEFAULT_TYPE, feedback):
    # user = update.message.from_user
    feedback = f"–≤–æ—Ç –Ω–∞ —á—Ç–æ –∂–∞–ª—É–µ—Ç—Å—è:{feedback}" if feedback else ""
    notification_text = f"–£—Ä–∞ —Å –Ω–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —á–µ—Å—Ç–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é!\n\n –≠—Ç–æ–π –ø–∏–¥–æ—Ä–∞—Å–∏–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {context.user_data['first_name']} (@{context.user_data['username']} —Ä–æ–¥–∏–ª—Å—è: {context.user_data['real_birth_date']})\n –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ(—Ö–æ—Ç—è –ø–æ—Ö—É–π), —Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–Ω –≤—ã–±—Ä–∞–ª —Å—Ñ–µ—Ä—É: {context.user_data['choose']}. –¢–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—å–∫—É –º–æ–∂–µ–º —Ä–∞–∑–±–∏—Ç—å –µ–º—É –µ–±–∞–ª–æ!!!\n\n{feedback}"
    await context.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=notification_text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # await query.edit_message_reply_markup(reply_markup=None)

    user = context.user_data["user"]
    query = update.callback_query
    await query.answer()

    if query.data == "0":
        context.user_data["choose"] = "–û—Ç–Ω–æ—à–µ–Ω–∏—è"
    elif query.data == "1":
        context.user_data["choose"] = "–§–∏–Ω–∞–Ω—Å—ã"
    elif query.data == "2":
        context.user_data["choose"] = "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"
    else:
        context.user_data["choose"] = "–ù–µ –∑–Ω–∞—é"
    # context.user_data["burn"] = "–§–∏–Ω–∞–Ω—Å—ã"
    # await query.edit_message_reply_markup(reply_markup=None)
    date_sum = sum(
        int(digit) for part in context.user_data["birth_date"] for digit in part
    )
    arcan = calculate_arcan(date_sum)
    context.user_data["arcan"] = arcan
    cursor.execute(
        "UPDATE users SET arcan = ? WHERE user_id = ?", (arcan, user.id))
    conn.commit()
    increment_arcana_counter(update, context, arcan)
    if not context.user_data["is_robot_sure"]:
        increment_counter(update, context, "success_count")
    else:
        increment_counter(update, context, "failure_count")
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'{context.user_data["is_robot_sure"]}{user.first_name}, —Ç–≤–æ–π –∞—Ä–∫–∞–Ω: {arcan}',
    )
    await send_arcan(update, context, arcan, query.data)
    await context.bot.delete_message(
        chat_id=query.message.chat_id, message_id=query.message.message_id
    )

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(
            "–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è, —Ö–æ—á—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ñ–µ—Ä—ã", callback_data="yes")],
        [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è", callback_data="no")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!\n–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑?",
        reply_markup=reply_markup,
    )

    # await query.edit_message_text(text=response)


async def handle_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.delete_message(
        chat_id=query.message.chat_id, message_id=query.message.message_id
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–î–∞"
    await notify_yes(update, context)
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text="–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥–∞, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å‚ù§Ô∏è"
    )
    # context.user_data["user"].id
    await ask_to_invite_friend(update, context, context.user_data["user"])
    # await send_arcan(update, context, context.user_data["arcan"], None)


async def handle_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await notify_no(update, context, None)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–ù–µ—Ç"
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="C–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n–ñ–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Çüò¢\n\n–ë—É–¥—É –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞, –µ—Å–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?",
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    context.user_data["awaiting_feedback"] = True
    context.user_data["dataaa"] = query.message


async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user = update.effective_user
    if context.user_data["was_met"] and context:
        return
    if context.user_data.get("awaiting_feedback"):
        feedback = update.message.text
        await notify_no(update, context, feedback)
        context.user_data["awaiting_feedback"] = False

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!"
        )
    else:
        await handle_birthday(update, context)


async def handle_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_subscription(update, context, "-1001909137196"):
        await ask_to_invite_friend(update, context, context.user_data["user"])
        return
    else:
        await send_arcan(update, context, context.user_data["arcan"], None)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    referrer_id = int(context.args[0]) if context.args else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.username is not None:
        # –ï—Å–ª–∏ username –∑–∞–¥–∞–Ω  –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ user_id
        cursor.execute(
            "SELECT id FROM users WHERE username = ? OR user_id = ?",
            (user.username, user.id),
        )
    else:
        cursor.execute("SELECT id FROM users WHERE user_id = ?", (user.id,))

    user_record = cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # cursor.execute(
    #     "SELECT id FROM users WHERE username = ? or user_id = ?",
    #     (
    #         user.username,
    #         user.id,
    #     ),
    # )
    # user_record = cursor.fetchone()
    if (
        user.username != "polinaataroo"
        and user.username != "willameh"
        and user_record is not None
    ):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏‚ù§Ô∏è\n\n–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ üò¢\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã -- –Ω–∞–ø–∏—à–∏ –º–Ω–µ: @polinaataroo üíå",
        )
        await notify_julik(context)
        context.user_data["was_met"] = True
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO users (username, chat_id, user_id) VALUES (?, ?, ?)",
            (user.username, chat_id, user.id),
        )
        user_id = cursor.lastrowid
        conn.commit()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –µ—Å—Ç—å
        if referrer_id:
            cursor.execute(
                "INSERT INTO referrals (referrer_id, referred_id) VALUES (?, ?)",
                (referrer_id, user_id),
            )
            conn.commit()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            await notify_referrer(update, context, referrer_id, user.username)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚ù§Ô∏è\n\n–Ø –¥–∞—Ä—é —Ç–µ–±–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–≥–æ –∞—Ä–∫–∞–Ω–∞ –∏ –ª–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2024 –≥–æ–¥.\n–í—ã–±–∏—Ä–∞–π —Å —É–º–æ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ñ–µ—Ä–∞ ‚ú®\n\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì",
        )
        context.user_data["was_met"] = False

    context.user_data["first_name"] = user.first_name
    context.user_data["username"] = user.username


async def notify_referrer(
    update: Update, context: ContextTypes.DEFAULT_TYPE, referrer_id, new_user_username
):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursor = conn.cursor()
    cursor.execute(
        "SELECT chat_id FROM users WHERE user_id = ?", (referrer_id,))
    if referrer_record := cursor.fetchone():
        referrer_chat_id = referrer_record[0]
        await context.bot.send_message(
            chat_id=referrer_chat_id,
            text=f"–¢–≤–æ–π –¥—Ä—É–≥ @{new_user_username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!",
        )
        cursor.execute(
            "SELECT arcan FROM users WHERE user_id = ?", (referrer_id,))
        result = cursor.fetchone()

        if not check_if_user_received_all_files(referrer_id) or referrer_id == 1358227914:
            await send_arcan(
                update, context, result[0] if result else None, None, referrer_chat_id
            )
            await context.bot.send_message(
                chat_id=referrer_chat_id,
                text=f"–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ñ–µ—Ä—ã —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, —Ç–æ –ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @polinaataroo\nüíå\n\n–¢–∞–∫–∂–µ —è –¥–∞—Ä—é —Ç–µ–±–µ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ª—é–±—É—é –∏–∑ –º–æ–∏—Ö —É—Å–ª—É–≥, –ø—Ä–æ–º–æ–∫–æ–¥ -- —Ç–≤–æ–π –Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {calculate_future_date(5)}‚ù§Ô∏è\n\n–ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Å—è –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–ª—å–∑–∞ –ø–æ —Ç–≤–æ–µ–º—É –ê—Ä–∫–∞–Ω—É ‚ú®",
            )
    cursor.execute(
        "UPDATE users SET already_have_all_files = 'yes' WHERE user_id = ?",
        (referrer_id,),
    )
    conn.commit()
    # cursor1 = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE user_id = ?", (referrer_id,))
    res = cursor.fetchone()
    res = res[0] if res else None
    await notify_referal_program(update, context, res)


def calculate_future_date(days_ahead):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±—É–¥—É—â–µ–π –¥–∞—Ç—ã, —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.
    –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: dd.mm.yy
    """
    current_date = datetime.now()
    future_date = current_date + timedelta(days=days_ahead)
    return future_date.strftime("%d.%m.%y")


def check_if_user_received_all_files(user_id):
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute(
        "SELECT already_have_all_files FROM users WHERE user_id = ?", (
            user_id,)
    )
    result = cursor.fetchone()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    return result[0] if result else None


def write_username_to_file(username, file_path):
    with open(file_path, "a", encoding="utf-8") as file:
        file.write(username + "\n")


def check_username_in_file(username, file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            usernames = [line.strip() for line in file]
            return username in usernames
    except FileNotFoundError:
        return False


if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    application.add_handler(
        MessageHandler(filters.TEXT & (~filters.COMMAND), feedback_handler)
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    application.add_handler(
        MessageHandler(filters.TEXT & (~filters.COMMAND), handle_birthday)
    )
    application.add_handler(
        CallbackQueryHandler(confirm_birthday_button,
                             pattern="^confirm_date_(yes|no)$")
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(CommandHandler("getStat", handle_get_stat))
    application.add_handler(CallbackQueryHandler(handle_yes, pattern="^yes$"))
    application.add_handler(CallbackQueryHandler(handle_no, pattern="^no$"))
    application.add_handler(
        CallbackQueryHandler(handle_subscribe, pattern="^subscribe$")
    )
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()
